buildscript {
    repositories {
        mavenLocal()
        maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
        google()
        mavenCentral()

        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

group = 'huige233'
version = '1.0-SNAPSHOT'
archivesBaseName = 'example'

minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
}

dependencies {
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}
tasks.genIntellijRuns.doFirst {
    def workspaceFile = file(".idea/workspace.xml")
    workspaceFile.parentFile.mkdirs()
    if (!workspaceFile.exists()) {
        workspaceFile.write("""\
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
            <component name="RunManager">
            </component>
        </project>
        """.stripIndent())
    } else {
        def workspace = new XmlParser().parse(workspaceFile)
        def runManager = workspace.component.findAll({ it.@name == "RunManager" })
        if (runManager.size() == 0) {
            // When IDEA first imported the project, the RunManager node didn't exist.
            workspace.appendNode("component", ["name": "RunManager"])
        } else {
            // The genIntellijRuns task doesn't delete old run configurations, this is bad.
            runManager.each {
                it.configuration.findAll({ it.@name == "Minecraft Client" || it.@name == "Minecraft Server" }).each { configuration ->
                    it.remove(configuration)
                }
            }
        }
        new PrintWriter(new FileWriter(workspaceFile)).withCloseable {
            new XmlNodePrinter(it).print(workspace)
        }
    }
}

tasks.genIntellijRuns.doLast {
    def workspaceFile = file(".idea/workspace.xml")
    def workspace = new XmlParser().parse(workspaceFile)
    workspace.component.findAll({ it.@name == "RunManager" }).each {
        it.configuration.findAll({ it.@name == "Minecraft Client" || it.@name == "Minecraft Server" }).each {
            // The module name specified in the run configuration generated by the genIntellijRuns task is wrong.
            // It uses underscores instead of dots.
            // https://github.com/MinecraftForge/ForgeGradle/blob/FG_2.3/src/main/java/net/minecraftforge/gradle/user/UserBasePlugin.java#L1325
            it.module.@name = project.idea.module.name + '.' + project.minecraft.runSourceSet.name
        }
    }
    new PrintWriter(new FileWriter(workspaceFile)).withCloseable {
        new XmlNodePrinter(it).print(workspace)
    }
}
import net.minecraftforge.gradle.tasks.DownloadAssetsTask
import sun.misc.SharedSecrets
import sun.misc.Unsafe

// initialize the constant pool and force to load strings so that strings can be replaced
void initConstantPool(Class<?> clazz) {
    if (clazz != null && !clazz.interface) {
        initConstantPool clazz.superclass

        def constantPool = SharedSecrets.javaLangAccess.getConstantPool clazz
        for (i in 0..constantPool.size) {
            try {
                constantPool.getStringAt i
            } catch (def ignored) {}
        }
    }
}

// replace string values in constant pools
void replaceString(String str1, String str2) {
    String.class.getDeclaredField "value" with {
        it.setAccessible true
        it.set str1, str2.toCharArray()
    }
}

// https://github.com/MinecraftForge/ForgeGradle/blob/FG_2.3/src/main/java/net/minecraftforge/gradle/tasks/DownloadAssetsTask.java#L189
initConstantPool Unsafe.theUnsafe.allocateInstance(DownloadAssetsTask.GetAssetTask.class).class
replaceString "http://resources.download.minecraft.net/", "https://resources.download.minecraft.net/"
